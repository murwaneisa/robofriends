{"version":3,"sources":["serviceWorker.js","robots.js","Card.js","Cardcont.js","SearchBox.js","Scroll.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","robots","id","name","username","email","Card","className","src","alt","Cardcont","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSerachChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4CCjBOC,EAAS,CACpB,CACEC,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,2BC5CIC,EAdF,SAAC,GAAuB,IAAtBH,EAAqB,EAArBA,KAAMD,EAAe,EAAfA,GAAIG,EAAW,EAAXA,MAEvB,OACC,yBAAKE,UAAW,wDACf,yBAAKC,IAAG,+BAA0BN,EAA1B,KAAiCO,IAAI,SAC7C,6BACC,4BAAKN,GACL,2BAAIE,MCcMK,EApBE,SAAC,GAAgB,IAAdT,EAAa,EAAbA,OAEnB,OACA,6BAEEA,EAAOU,KAAK,SAACC,EAAOC,GACpB,OACA,kBAAC,EAAD,CACEC,IAAKD,EACLX,GAAID,EAAOY,GAAGX,GACRC,KAAMF,EAAOY,GAAGV,KAChBE,MAAOJ,EAAOY,GAAGR,aCCbU,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACC,yBAAKV,UAAU,OACd,2BACAA,UAAU,iCACTW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCCI,G,MARA,SAACC,GACf,OACC,yBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,YC0CKC,E,kDAtCd,aAAc,IAAD,8BACZ,gBAYAC,eAAiB,SAACC,GAEjB,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAb1C,EAAKC,MAAM,CACVjC,OAAQ,GACRe,YAAY,IAJD,E,gEAOQ,IAAD,OACnBmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAW,EAAKR,SAAS,CAAE9B,OAAQA,S,+BAOjC,IAAD,OACAuC,EAAiBC,KAAKP,MAAMjC,OAAOyC,QAAQ,SAAAC,GACtC,OAAOA,EAAMxC,KAAKyC,cAClBC,SAAS,EAAKX,MAAMlB,YAAY4B,kBAE3C,OAAgC,IAA7BH,KAAKP,MAAMjC,OAAO6C,OACb,uCAGP,yBAAKvC,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAcwB,KAAKZ,iBAC/B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU5B,OAAQuC,U,GA/BLO,aCGlBC,IAASC,OAEP,kBAAC,EAAD,MAAOC,SAASC,eAAe,SPsH3B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.37a738da.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nexport const robots = [\r\n  {\r\n    id: 1,\r\n    name: 'Leanne Graham',\r\n    username: 'Bret',\r\n    email: 'Sincere@april.biz'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Ervin Howell',\r\n    username: 'Antonette',\r\n    email: 'Shanna@melissa.tv'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Clementine Bauch',\r\n    username: 'Samantha',\r\n    email: 'Nathan@yesenia.net'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Patricia Lebsack',\r\n    username: 'Karianne',\r\n    email: 'Julianne.OConner@kory.org'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Chelsey Dietrich',\r\n    username: 'Kamren',\r\n    email: 'Lucio_Hettinger@annie.ca'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Mrs. Dennis Schulist',\r\n    username: 'Leopoldo_Corkery',\r\n    email: 'Karley_Dach@jasper.info'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Kurtis Weissnat',\r\n    username: 'Elwyn.Skiles',\r\n    email: 'Telly.Hoeger@billy.biz'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Nicholas Runolfsdottir V',\r\n    username: 'Maxime_Nienow',\r\n    email: 'Sherwood@rosamond.me'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Glenna Reichert',\r\n    username: 'Delphine',\r\n    email: 'Chaim_McDermott@dana.io'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Clementina DuBuque',\r\n    username: 'Moriah.Stanton',\r\n    email: 'Rey.Padberg@karina.biz'\r\n  },\r\n];\r\n\r\n","import React  from 'react';\r\n\r\nconst Card = ({name, id, email}) => {\r\n\t\r\n\t\treturn (\r\n\t\t\t<div className= ' tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t\t<img src={`https://robohash.org/${id}?`} alt='phot'/>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t\t<p>{email}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from'./Card';\r\n\r\nconst Cardcont = ( {robots} ) => {\r\n\t\r\n\treturn(\r\n\t<div>\r\n{ \r\n\t\t robots.map( (user , i) => {\r\n\t\t\treturn (\r\n\t\t\t<Card\r\n\t\t\t\t key={i}\r\n\t\t\t\t id={robots[i].id}\r\n\t\t         name={robots[i].name}\r\n\t\t         email={robots[i].email}\r\n\t         />\r\n\t          );\r\n\t\t})\r\n}\t\t\r\n\t</div>\r\n  );\t\r\n}\r\n\r\nexport default Cardcont;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input\r\n\t\t\tclassName=' pa3 ba b--green bg-light-blue'\r\n\t\t\t type='search' \r\n\t\t\t placeholder='search robots'\r\n\t\t\t onChange={searchChange}\r\n\t\t\t />\r\n       </div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t<div style={{overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport { robots } from'./robots';\r\nimport Cardcont from'./Cardcont';\r\nimport SearchBox from'./SearchBox'\r\nimport './App.css'\r\nimport Scroll from'./Scroll'\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield:''\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => { this.setState({ robots: robots })});\r\n\t}\r\n\r\n\t\tonSerachChange = (event) => {\r\n\t\t\t/*to uppdate the staet use this.setStste*/\r\n\t\t\tthis.setState({searchfield: event.target.value})\r\n\t\t}\r\n\trender(){\r\n\t\t\tconst filteredRobots = this.state.robots.filter( robot =>{\r\n              return robot.name.toLowerCase().\r\n              includes(this.state.searchfield.toLowerCase())\r\n\t\t\t})\r\n\t\t\tif(this.state.robots.length === 0){\r\n\t\t\t\treturn <h1>Loading</h1>\r\n\t\t\t}else{\t\r\n\t\t\t\t\treturn(\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t\t<SearchBox searchChange={this.onSerachChange} />\r\n\t\t\t\t<Scroll>\t\r\n\t\t\t\t\t<Cardcont robots={filteredRobots}/>\r\n\t\t\t\t</Scroll>\t\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport 'tachyons';\n// import Card from'./Card';\nimport App from'./App';\n\n\n\n\nReactDOM.render(\n\t\n  <App/>,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}